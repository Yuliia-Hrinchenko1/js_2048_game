{"version":3,"sources":["app.js"],"names":["GRID_SIZE","gameGrid","Array","from","length","fill","score","gameIsOver","startButton","document","querySelector","winMessage","loseMessage","startMessage","restartButton","getElementById","scoreElement","generateRandomNumber","randomNumber","Math","random","emptyCells","row","col","push","randomIndex","floor","renderGame","gameField","cellValue","cellElement","rows","cells","className","textContent","classList","add","initGame","remove","restartGame","blur","startGame","hideStartMessage","handleKeyPress","move","key","moveUp","moveDown","moveLeft","moveRight","combineCells","nextRow","nextCol","currentValue","moveCellsUp","isMoved","currentRow","aboveValue","moveCellsDown","belowValue","moveCellsLeft","currentCol","leftValue","moveCellsRight","rightValue","moveCells","direction","updateScore","checkWin","checkGameOver","addEventListener"],"mappings":"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","file":"app.641a8a5f.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst GRID_SIZE = 4;\nlet gameGrid = Array.from(\n  { length: GRID_SIZE },\n  () => Array(GRID_SIZE).fill(0),\n);\nlet score = 0;\nlet gameIsOver = false;\n\nconst startButton = document.querySelector('.button.start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst startMessage = document.querySelector('.message-start');\nconst restartButton = document.getElementById('restartButton');\nconst scoreElement = document.querySelector('.game-score');\n\nfunction generateRandomNumber() {\n  const randomNumber = Math.random() < 0.1 ? 4 : 2;\n  const emptyCells = [];\n\n  for (let row = 0; row < GRID_SIZE; row++) {\n    for (let col = 0; col < GRID_SIZE; col++) {\n      if (gameGrid[row][col] === 0) {\n        emptyCells.push({\n          row,\n          col,\n        });\n      }\n    }\n  }\n\n  if (emptyCells.length > 0) {\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n    const { row, col } = emptyCells[randomIndex];\n\n    gameGrid[row][col] = randomNumber;\n  }\n}\n\nfunction renderGame() {\n  const gameField = document.querySelector('.game-field');\n\n  for (let row = 0; row < GRID_SIZE; row++) {\n    for (let col = 0; col < GRID_SIZE; col++) {\n      const cellValue = gameGrid[row][col];\n      const cellElement = gameField.rows[row].cells[col];\n\n      cellElement.className = 'field-cell';\n\n      if (cellValue !== 0) {\n        cellElement.textContent = cellValue;\n        cellElement.classList.add(`field-cell--${cellValue}`);\n      } else {\n        cellElement.textContent = '';\n      }\n    }\n  }\n}\n\nfunction initGame() {\n  gameGrid = Array.from({ length: GRID_SIZE }, () => Array(GRID_SIZE).fill(0));\n\n  score = 0;\n  gameIsOver = false;\n\n  generateRandomNumber();\n  generateRandomNumber();\n\n  renderGame();\n\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n\n  startMessage.classList.remove('hidden');\n  startButton.classList.remove('hidden');\n  document.getElementById('restartButton').classList.add('hidden');\n}\n\nfunction restartGame() {\n  score = 0;\n  gameIsOver = false;\n\n  for (let row = 0; row < GRID_SIZE; row++) {\n    for (let col = 0; col < GRID_SIZE; col++) {\n      gameGrid[row][col] = 0;\n    }\n  }\n\n  generateRandomNumber();\n  generateRandomNumber();\n\n  renderGame();\n\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n\n  startMessage.classList.add('hidden');\n  startButton.classList.add('hidden');\n\n  document.getElementById('restartButton').classList.remove('hidden');\n  document.querySelector('.game-score').textContent = score;\n\n  restartButton.blur();\n}\n\nrestartButton.addEventListener('click', () => {\n  restartGame();\n});\n\nfunction startGame() {\n  hideStartMessage();\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n\n  startButton.classList.add('hidden');\n  document.getElementById('restartButton').classList.remove('hidden');\n}\n\nfunction hideStartMessage() {\n  startMessage.classList.add('hidden');\n}\n\nfunction handleKeyPress(move) {\n  if (gameIsOver) {\n    return;\n  }\n\n  const key = move.key;\n\n  if (key === 'ArrowUp'\n    || key === 'ArrowDown' || key === 'ArrowLeft' || key === 'ArrowRight') {\n    hideStartMessage();\n    startButton.classList.add('hidden');\n    restartButton.classList.remove('hidden');\n  }\n\n  switch (key) {\n    case 'ArrowUp':\n      moveUp();\n      break;\n    case 'ArrowDown':\n      moveDown();\n      break;\n    case 'ArrowLeft':\n      moveLeft();\n      break;\n    case 'ArrowRight':\n      moveRight();\n      break;\n    default:\n      break;\n  }\n}\n\ndocument.addEventListener('keydown', handleKeyPress);\nstartButton.addEventListener('click', startGame);\n\ninitGame();\n\nfunction combineCells(row, col, nextRow, nextCol) {\n  const currentValue = gameGrid[row][col];\n  const nextValue = gameGrid[nextRow][nextCol];\n\n  if (currentValue === nextValue) {\n    gameGrid[row][col] = currentValue * 2;\n    gameGrid[nextRow][nextCol] = 0;\n    score += currentValue * 2;\n  }\n}\n\nfunction moveCellsUp() {\n  let isMoved = false;\n\n  for (let col = 0; col < GRID_SIZE; col++) {\n    for (let row = 1; row < GRID_SIZE; row++) {\n      let currentRow = row;\n\n      while (currentRow > 0) {\n        const currentValue = gameGrid[currentRow][col];\n        const aboveValue = gameGrid[currentRow - 1][col];\n\n        if (currentValue === 0) {\n          break;\n        } else if (aboveValue === 0) {\n          gameGrid[currentRow][col] = 0;\n          gameGrid[currentRow - 1][col] = currentValue;\n          currentRow--;\n          isMoved = true;\n        } else if (currentValue === aboveValue) {\n          combineCells(currentRow - 1,\n            col, currentRow, col);\n          isMoved = true;\n          break;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n  return isMoved;\n}\n\nfunction moveCellsDown() {\n  let isMoved = false;\n\n  for (let col = 0; col < GRID_SIZE; col++) {\n    for (let row = GRID_SIZE - 2; row >= 0; row--) {\n      let currentRow = row;\n\n      while (currentRow < GRID_SIZE - 1) {\n        const currentValue = gameGrid[currentRow][col];\n        const belowValue = gameGrid[currentRow + 1][col];\n\n        if (currentValue === 0) {\n          break;\n        } else if (belowValue === 0) {\n          gameGrid[currentRow][col] = 0;\n          gameGrid[currentRow + 1][col] = currentValue;\n          currentRow++;\n          isMoved = true;\n        } else if (currentValue === belowValue) {\n          combineCells(currentRow + 1, col,\n            currentRow, col);\n          isMoved = true;\n          break;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n  return isMoved;\n}\n\nfunction moveCellsLeft() {\n  let isMoved = false;\n\n  for (let row = 0; row < GRID_SIZE; row++) {\n    for (let col = 1; col < GRID_SIZE; col++) {\n      let currentCol = col;\n\n      while (currentCol > 0) {\n        const currentValue = gameGrid[row][currentCol];\n        const leftValue = gameGrid[row][currentCol - 1];\n\n        if (currentValue === 0) {\n          break;\n        } else if (leftValue === 0) {\n          gameGrid[row][currentCol] = 0;\n          gameGrid[row][currentCol - 1] = currentValue;\n          currentCol--;\n          isMoved = true;\n        } else if (currentValue === leftValue) {\n          combineCells(row, currentCol - 1,\n            row, currentCol);\n          isMoved = true;\n          break;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n  return isMoved;\n}\n\nfunction moveCellsRight() {\n  let isMoved = false;\n\n  for (let row = 0; row < GRID_SIZE; row++) {\n    for (let col = GRID_SIZE - 2; col >= 0; col--) {\n      let currentCol = col;\n\n      while (currentCol < GRID_SIZE - 1) {\n        const currentValue = gameGrid[row][currentCol];\n        const rightValue = gameGrid[row][currentCol + 1];\n\n        if (currentValue === 0) {\n          break;\n        } else if (rightValue === 0) {\n          gameGrid[row][currentCol] = 0;\n          gameGrid[row][currentCol + 1] = currentValue;\n          currentCol++;\n          isMoved = true;\n        } else if (currentValue === rightValue) {\n          combineCells(row, currentCol + 1,\n            row, currentCol);\n          isMoved = true;\n          break;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n  return isMoved;\n}\n\nfunction moveCells(direction) {\n  let isMoved = false;\n\n  switch (direction) {\n    case 'up':\n      isMoved = moveCellsUp();\n      break;\n    case 'down':\n      isMoved = moveCellsDown();\n      break;\n    case 'left':\n      isMoved = moveCellsLeft();\n      break;\n    case 'right':\n      isMoved = moveCellsRight();\n      break;\n    default:\n      break;\n  }\n\n  if (isMoved) {\n    generateRandomNumber();\n    renderGame();\n    updateScore();\n\n    if (checkWin()) {\n      winMessage.classList.remove('hidden');\n    }\n\n    if (checkGameOver()) {\n      loseMessage.classList.remove('hidden');\n    }\n  }\n}\n\nfunction moveUp() {\n  moveCells('up');\n}\n\nfunction moveDown() {\n  moveCells('down');\n}\n\nfunction moveLeft() {\n  moveCells('left');\n}\n\nfunction moveRight() {\n  moveCells('right');\n}\n\nfunction checkGameOver() {\n  for (let row = 0; row < GRID_SIZE; row++) {\n    for (let col = 0; col < GRID_SIZE; col++) {\n      if (gameGrid[row][col] === 0) {\n        return false;\n      }\n\n      if (col > 0 && gameGrid[row][col] === gameGrid[row][col - 1]) {\n        return false;\n      }\n\n      if (row > 0 && gameGrid[row][col] === gameGrid[row - 1][col]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction checkWin() {\n  for (let row = 0; row < GRID_SIZE; row++) {\n    for (let col = 0; col < GRID_SIZE; col++) {\n      if (gameGrid[row][col] === 2048) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction updateScore() {\n  scoreElement.textContent = score;\n}\n"]}